#BlueJ class context
comment0.target=Vector
comment0.text=\r\n\ Representa\ um\ vetor/posi\u00E7\u00E3o\r\n\r\n\ @author\ 202200196\r\n\ @author\ 202200215\r\n\r\n\ @version\ 1.0\r\n
comment1.params=
comment1.target=Vector()
comment1.text=\r\n\ Construtor\ do\ Vector\ padr\u00E3o\r\n
comment10.params=a\ b\ direction\ angle
comment10.target=boolean\ isWithinAngle(Vector,\ Vector,\ Direction,\ float)
comment10.text=\r\n\ Verifica\ se\ o\ ponto\ b\ est\u00E1\ dentro\ do\ cone\ de\ dire\u00E7\u00E3o\ fornecida\ e\ com\ o\ \u00E2ngulo\ fornecido\r\n\ @param\ a\ ponto\ A,\ ponto\ de\ origem\r\n\ @param\ b\ ponto\ B,\ ponto\ a\ testar\r\n\ @param\ direction\ dire\u00E7\u00E3o\ que\ o\ ponto\ A\ t\u00E1\ a\ apontar\r\n\ @param\ angle\ \u00E2ngulo\ a\ testar\r\n\ @return\ Verdadeiro\ caso\ o\ ponto\ b\ esteja\ dentro\ do\ cone\ de\ dire\u00E7\u00E3o\ fornecida\ e\ com\ o\ \u00E2ngulo\ fornecido\r\n
comment11.params=a\ b
comment11.target=float\ getTangent(Vector,\ Vector)
comment12.params=a\ b
comment12.target=Direction\ getDirection(Vector,\ Vector)
comment12.text=\r\n\ Obt\u00E9m\ a\ dire\u00E7\u00E3o\ que\ aponta\ do\ ponto\ a\ para\ o\ b,\ caso\ estes\ dois\ sejam\ adjacentes\r\n\ @param\ a\ ponto\ A\r\n\ @param\ b\ ponto\ B\r\n\ @return\ Dire\u00E7\u00E3o\ do\ ponto\ b\ em\ rela\u00E7\u00E3o\ ao\ ponto\ a,\ caso\ n\u00E3o\ sejam\ adjacentes\ retorna\ null\r\n
comment13.params=other
comment13.target=boolean\ equals(Vector)
comment13.text=\r\n\ Verifica\ se\ este\ vetor\ e\ o\ fornecido\ s\u00E3o\ iguais\r\n\ @param\ other\ vetor\ a\ comparar\r\n\ @return\ Verdadeiro\ caso\ este\ e\ o\ fornecido\ sejam\ iguais\r\n
comment14.params=object
comment14.target=boolean\ equals(java.lang.Object)
comment15.params=
comment15.target=int\ hashCode()
comment16.params=
comment16.target=java.lang.String\ toString()
comment2.params=x\ y
comment2.target=Vector(int,\ int)
comment2.text=\r\n\ Construtor\ do\ Vector\ com\ valores\r\n\ @param\ x\ componente\ X\r\n\ @param\ y\ componente\ Y\r\n
comment3.params=vector
comment3.target=Vector(Vector)
comment3.text=\r\n\ Construtor\ do\ Vector\ para\ copiar\ outro\ vetor\r\n\ @param\ vector\ vetor\ a\ copiar\r\n
comment4.params=a\ b\ c
comment4.target=boolean\ isBetween(Vector,\ Vector,\ Vector)
comment4.text=\r\n\ Verifica\ se\ o\ ponto\ c\ est\u00E1\ contido\ dentro\ de\ um\ quadrado\ delimitado\ pelos\ pontos\ a\ e\ b\r\n\ @param\ a\ ponto\ A\r\n\ @param\ b\ ponto\ B\r\n\ @param\ c\ ponto\ C,\ ponto\ a\ testar\r\n\ @return\ Verdadeiro\ caso\ c\ esteja\ contido\ entre\ os\ pontos\ b\ e\ c\r\n
comment5.params=a\ b\ c
comment5.target=boolean\ isPerimeter(Vector,\ Vector,\ Vector)
comment5.text=\r\n\ Verifica\ se\ o\ ponto\ c\ est\u00E1\ contido\ no\ per\u00EDmetro\ de\ um\ quadrado\ delimitado\ pelos\ pontos\ a\ e\ b\r\n\ @param\ a\ ponto\ A\r\n\ @param\ b\ ponto\ B\r\n\ @param\ c\ ponto\ C,\ ponto\ a\ testar\r\n\ @return\ Verdadeiro\ caso\ c\ esteja\ contido\ no\ per\u00EDmetro\ dos\ pontos\ b\ e\ c\r\n
comment6.params=a\ b\ c\ d
comment6.target=boolean\ areOpposingInPerimeter(Vector,\ Vector,\ Vector,\ Vector)
comment6.text=\r\n\ Verifica\ se\ os\ pontos\ c\ e\ d\ est\u00E3o\ contido\ em\ bordas\ opostas\ do\ per\u00EDmetro\ de\ um\ quadrado\ delimitado\ pelos\ pontos\ a\ e\ b\r\n\ @param\ a\ ponto\ A\r\n\ @param\ b\ ponto\ B\r\n\ @param\ c\ ponto\ C,\ ponto\ a\ testar\r\n\ @param\ d\ ponto\ D,\ ponto\ a\ testar\r\n\ @return\ Verdadeiro\ caso\ c\ e\ d\ estejam\ contidos\ em\ bordas\ opostas\ entre\ os\ pontos\ b\ e\ c\r\n
comment7.params=a\ b
comment7.target=boolean\ isAdjacent(Vector,\ Vector)
comment7.text=\r\n\ Verifica\ se\ os\ pontos\ a\ e\ b\ s\u00E3o\ adjacentes\r\n\ @param\ a\ ponto\ A\r\n\ @param\ b\ ponto\ B\r\n\ @return\ Verdadeiro\ caso\ os\ pontos\ a\ e\ b\ sejam\ adjacentes\r\n
comment8.params=a\ direction
comment8.target=Vector\ getAdjacent(Vector,\ Direction)
comment8.text=\r\n\ Obt\u00E9m\ o\ ponto\ adjacente\ fornecida\ uma\ dire\u00E7\u00E3o\r\n\ @param\ a\ ponto\ A\r\n\ @param\ direction\ Dire\u00E7\u00E3o\ a\ utilizar\r\n\ @return\ Vetor\ da\ posi\u00E7\u00E3o\ na\ dire\u00E7\u00E3o\ fornecida\ caso\ v\u00E1lida,\ caso\ contr\u00E1rio\ retorna\ null\r\n
comment9.params=a\ b
comment9.target=float\ getDistance(Vector,\ Vector)
comment9.text=\r\n\ Obt\u00E9m\ o\ ponto\ adjacente\ fornecida\ uma\ dire\u00E7\u00E3o\r\n\ @param\ a\ ponto\ A\r\n\ @param\ b\ ponto\ B\r\n\ @return\ Vetor\ da\ posi\u00E7\u00E3o\ adjacente\ na\ dire\u00E7\u00E3o\ fornecida\ caso\ v\u00E1lida,\ caso\ contr\u00E1rio\ retorna\ null\r\n
numComments=17
